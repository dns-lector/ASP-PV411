@* Інжекція можлива і в Razor *@
@inject ASP_PV411.Services.Random.IRandomService randomService

@{
    ViewData["Title"] = "IoC";
}

<div class="text-center">
    <h1 class="display-4">Інверсія управління. Сервіси.</h1>
</div>
@ViewData["rnd"] 
<br/>
@ViewData["ref"] @randomService.GetHashCode()
<br />
@ViewData["ctrl"]
<p>
	<b>Інверсія управління</b> (IoC - Inversion of control) - архітектурний шаблон
    згідно з яким управління (контроль за) життєвим циклом об'єктів перекладається 
    на єдиний модуль. Технічною мовою, замість інструкцій <code>new</code> для 
    створення об'єктів здійснюється запит до цього модуля.
</p>
<p>
    <b>Інжекція</b> (DI Dependency injection) - спосіб автоматизації запитів до модуля ІоС відповідно до якого 
    запити здійснюються шляхом аналізу конструкторів класів, об'єкти яких вимагається
    побудувати. Замість прямого звернення до модуля необхідні для класу об'єкти 
    зазначаються у його конструкторі.
</p>
<p>
    <b>Сервіси</b> (у контексті ІоС) - об'єкти, що їх життевим циклом керує модуль ІоС,
    тобто ті, які призначені для інжектування. Зазвичай, мова іде про класи, об'єкти 
    яких можуть знадобитися у різних частинах проєкту. Наприклад, є вимога безпеки, 
    щоб генератор випадкових чисел був винятково один. Перестворення нових генераторів 
    може призвести до повторення послідовності чисел. 
</p>
<p>
    Процес використання ІоС складається з двох етапів: реєстрація сервісів із зазначенням
    їх життєвих циклів, та резолюція (Resolve) - вирішення задачі створення об'єктів
    шляхом підстановки до них усіх запитаних сервісів.
</p>
<p>
    Життєві цикли сервісів
</p>
<table class="table table-striped">
    <thead>
        <tr><th>Назва</th><th>Оновлення сторінки</th><th>Різні точки інжекції</th><th>Опис</th></tr>
    </thead>
    <tbody>
		<tr><td>Singleton</td><td>Не змінюється</td><td>Не змінюється</td><td>Не перестворюється ніколи</td></tr>
        <tr><td>Transient</td><td>Змінюється</td><td>Змінюється</td><td>Перестворюється для кожної інжекції</td></tr>
        <tr><td>Scoped</td><td>Змінюється</td><td>Не змінюється</td><td>Постійний для одного запиту, з іншим перестворюється</td></tr>
    </tbody>
</table>
<p>
    <b>Принцип інверсії залежностей</b> (DIP Dependency inversion principle) - один
    з принципів SOLID (не слід створювати залежності від реалізацій [класів], перевагу 
	слід надати залежностям від абстракцій [ітерфейсів]). Слідування цьому принципу 
    дозволяє легко перемикатись на нові реалізації сервісів, а також повертатись до 
    попередніх (скасовувати оновлення). При створенні сервісу необхідно почати зі 
    створення інтерфейсу, через який сервіси будуть впроваджені до точкок інжекції. 

</p>
<p>
    Д.З. Створити модель для представлення ІоС (HomeIocViewModel), 
    замінити передачу даних через ViewData, 
    реалізувати підпис для даних, що виводяться: 
    хеш-код сервіса у контролері: 86707860
    хеш-код сервіса у Razor: ....
    ....

</p>