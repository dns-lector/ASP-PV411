@model ASP_PV411.Models.Home.HomeRazorViewModel

@{
    ViewData["Title"] = "Razor";
}

<div class="text-center">
    <h1 class="display-4">Синтаксис Razor</h1>
</div>
<h2>Ідеї</h2>
<p>
    Головна задача, що вирішується при серверній активності - це інтерполяція 
    рядків та даних, формування HTML як String (рядкової змінної) з додатковими 
    задачами вставлення даних, умовної верстки (додавання частин тільки при 
    виконанні певних умов) а також циклічної верстки (формування однакових 
    блоків для різних наборів даних)
</p>
<h2>Основи синтаксису</h2>
<p>
    Основним символом, що задає режим "Razor" є <code>&commat;</code>.
    При цьому сам символ стає активним і для виведення його на сторінку 
	необхідно скористатись сутністю <code>&amp;commat;</code>. Винятком 
    переходу у програмний режим є правильно сформовані E-mail адреси, в 
    яких даний символ ігнорується як командний: user@ukr.net
</p>
<h2>Вирази</h2>
<p>
    Виразами (expressions) у програмуванні називають інструкції, які мають 
    результат. У контексті Razor мова ідеться про вставку результатів 
    виразів до розмітки. Підстановка здійснюється у те місце, де зазначається
    вираз. Сам вираз формується конструкцією <code>&commat;(вираз)</code>, наприклад,
    <br/>
	<code>&commat;(2 + 3) = @(2 + 3)</code>,
    <br/>
    Круглі дужки задають межі виразу, все, що знаходиться поза ними, навіть якщо
    схоже на продовження виразу, сприймається як звичайний текст, наприклад: 
    <br/>
    <code>&commat;(2 + 3) + 4 = @(2 + 3) + 4</code>
    <br />
    У виразі доступні всі засоби мови програмування, у т.ч. методи об'єктів,
    наприклад:<br />
    <code>
        &commat;((2 + 1.0 / 3 + Math.Sqrt(3)).ToString("F4")) = 
               @((2 + 1.0 / 3 + Math.Sqrt(3)).ToString("F4"))
    </code>
</p>
<h2>Інструкції</h2>
<p>
    На відміну від виразів до інструкцій (statements) відносять ті, які не 
    мають виразів. Їх також називають операторами (від англ.) або операціями.
    Інструкції задаються за допомогою синтаксису <code>&commat;{statements}</code>.
    Відсутність результату інструкцій не чинить ефекту на розмітку, 
    візуально не спостерігається. Оформлення інструкцій - за правилами 
    мови програмування, зокрема для C# необхідні ";". Наприклад:
    <br/>
    <code>
        &commat;{<br />
        &emsp; int x = 10;<br />
        &emsp; String str = "Hello";<br />
        }<br />
    </code>
    Місце виконання коду відповідає місцю його розміщення, зокрема, оголошені 
    у блоці змінні будуть доступні тільки далі за розміткою. Традиційно, 
    всі інструкції (за потреби) переміщуються до початку сторінки до єдиного 
    блоку.
</p>
@{
    int x = 10;
    String str = "Hello";
}
<h2>Скорочені вирази та змінні</h2>
<p>
    При виведенні змінних можна вживати скорочений синтаксис 
    <code>&commat;змінна</code> без круглих дужок. Повний синтаксис 
    також припустимий <code>&commat;(змінна)</code>
    <br/>
    <code>&commat;(x) = @(x), &commat;str = @str</code>
    <br/>
    Зі скороченим синтаксисом потрібно бути обережним - інтерполяція діє 
    тільки на саму змінну і на деякі операції на кшталт індексування чи 
    виклику методу. Але на більшість інших операцій не поширюється.<br />
    <code>&commat;x.ToString("F2") = @x.ToString("F2")</code><br />
    <code>&commat;x + 2 = @x + 2</code><br />
    <code>&commat;(x + 2) = @(x + 2)</code><br />
    <code>&commat;str + " World!" = @str + " World!"</code><br />
    <code>&commat;(str + " World!") = @(str + " World!")</code>
</p>
<h2>Умовна верстка</h2>
<p>
    Для ряду операторів існує скорочена форма інструкцій, зокрема, для 
    умовного оператора - <code>&commat;if</code>. Припускаються як 
    скорочена форма оператора:<br/>
    <code>
        &commat;if (str.Length < 7)<br />
        {<br />
        &emsp; &lt;i>Довжина str менша за 7&lt;/i><br />
        }<br />
    </code>
    @if (str.Length < 7)
    {
        <i>Довжина str менша за 7</i>
    }
    <br/>
    <br/>
    так і повна форма<br />
    <code>
        &commat;if (str.Length < 3)<br />
        {<br />
        &emsp; &lt;i>Довжина str менша за 3&lt;/i><br />
        }<br />
        else<br />
        {<br />
        &emsp; &lt;u>Довжина str не менша за 3&lt;/u><br />
        }<br />
    </code>
    @if (str.Length < 3)
    {
        <i>Довжина str менша за 3</i>
    }
    else
    {
        <u>Довжина str не менша за 3</u>
    }
</p>
<h2>Цикли</h2>
<p>
    Razor підтримує усі види циклів C# у скороченій формі: 
    <code>&commat;for, &commat;while, &commat;foreach, ...</code>
    Частіше за все використовується цикл-ітератор для опрацювань
    даних-масивів або колекцій.
    Передача даних від контролерів до представлень може здійснюватись 
    через спеціальні транспортні об'єкти: 
    <code>ViewBag</code> та <code>ViewData</code>
</p>
@foreach(String s in ViewBag.arr2)
{
    <i>@s</i>
}
@foreach(String s in ViewData["arr1"] as String[])
{
    <i>@s</i>
}
<p>
    Як <code>ViewBag</code> так і <code>ViewData</code> не проводять контроль 
    ані імен полів, ані їх типів. Це значно ускладнює передачу комплексних 
    даних і свідчить на користь використання моделей. 
    Моделі представлень ViewModels / PageModels
    (не плутати з модулем ViewModel у патерні MVVM) - це класи (або об'єкти),
    які призначені для групування даних, що передаються від контролерів до 
    представлень. Забезпечуючи контроль за типами та назвами.
</p>
<p>Для створення моделі необхідно:</p>
<ul>
    <li>Описати клас моделі. Рекомендовано в директорії Models, рекомендовано
        додати директорію контролера. Можна дотримуватись шаблона іменування 
        [Controller][Action][Type]Model, наприклад, HomeRazorViewModel

    <li>У контролері створити об'єкт класа-моделі, заповнити його даними, 
        передати до представлення через аргумент виклику View(model)

    <li>Прийняти модель у представленні (див. перший рядок даного файлу)
        і звертатись до неї через зарезервоване ім'я <code>Model</code>, наприклад:
        <br/>
        <code>
            &commat;foreach (var product in Model.Products)<br/>
            {<br />
            &emsp; &lt;p>&commat;product.Name&lt;/p><br />
            }<br />
        </code>
</ul>

<ol>
    @foreach(var product in Model.Products)
    {
        <li>@product.Name -- @product.Price грн</li>
	}
</ol>
<p>
    Д.З. Реалізувати відображення товарів з моделі у вигляді
    HTML-таблиці на кшталт 

    | Назва | Ціна  |
    |-------|-------|
    | Asus  | 18900 |
    ...
    * використовуючи класи Bootstrap стилізувати таблицю
    https://getbootstrap.com/docs/5.3/content/tables/
</p>